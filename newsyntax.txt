[dup *] 'sqr def

'dup 'duplicate alias

[1 +] 'inc def

1 1 inc inc + # 4

> ["bigger"] ["smaller"] if

[4 'four <-] let four four + out # ESCAPE THE SCOPE

[2 2 + 'four <- 3 3 + 'nine <-] let four nine + out

[
'fst <-
'snd <-
fst snd > [fst] [snd] if
] 'max def 

[
2over > [drop] [swap drop] if
] 'maxi def

[over over] '2over def

# String interpolation

[
fst <-
"This is $fst, everybody!" 
] 'present def

#String with interpolation where one can execute wrods _inside of_ the string.

[
"This is $pop, everybody!"
] 'present def


# def with type declaration:

[[Num] [Num] ->] decl
[dup *] 'sqr def

[Num] [Num] -> # words pops one Num from the stack, and returns a new Num. 
