1. What is a stack language? 

   - Stack vs concatenative language (latter does not have to be implemented as a stack)
   - Everything implicitly uses the stack
   - Forth (and friends)
   - Stack machines (virtual, software, hardware) and register machines
   
2. Stabl

   - Basic syntax and semantics
     - post fix for everything
     - problem with if and such: how to not evaluate immediate words on the stack?
   - Implementation in Haskell 
     - Parsing: parser combinators, applicative parsing and context free grammars
     - Storing AST in Algebraic Data Types
   - Static semantics
     - Simple static cheching
   - Dynamic semantics
     - Interpreter

3. Bonus
   - implementing concatenative functions with functions in Haskell


